#!/bin/sh

# Electron Cash - lightweight Bitcoin client
# Copyright (C) 2019 Axel Gembe <derago@gmail.com>
#
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

if [ `uname` == "Darwin" ]; then
	realpath=grealpath
else
	realpath=realpath
fi

here=$(dirname $($realpath "$0"))
. "$here"/../base.sh # functions we use below (fail, et al)

TTFURL="https://noto-website-2.storage.googleapis.com/pkgs/NotoColorEmoji-unhinted.zip"
TTFHASH="d7983299f53742592f61539607c5d9528bcc83639f9a99df94a22c0df4890355"
TTFNAME=$(basename $TTFURL)
TTFPATH="$here/$TTFNAME"

SRCURL="https://github.com/googlefonts/noto-emoji/archive/v2018-08-10-unicode11.tar.gz"
SRCHASH="1275143ca462e773515b9a76bb3a0d072fe4359e66707f8f7d337c772afab9d7"
SRCNAME=$(basename $SRCURL)
SRCPATH="$here/$SRCNAME"

download_if_not_exist "$TTFPATH" "$TTFURL"
verify_hash "$TTFPATH" "$TTFHASH"

download_if_not_exist "$SRCPATH" "$SRCURL"
verify_hash "$SRCPATH" "$SRCHASH"

(
    info "Extracting TrueType file"
    rm -rf "$here"/unzipped
    mkdir "$here"/unzipped
    cd "$here"/unzipped
    unzip "$TTFPATH"
)

TTF="$here"/unzipped/NotoColorEmoji.ttf

info "Building subset of the TrueType file"
pyftsubset "$TTF" --unicodes-file="$here"/emojis.txt --output-file="$here"/emojis.ttf

rm -rf "$here"/unzipped

# We name the font 'Segoe UI Emoji' because that will override the emoji
# font on Windows. Sadly Qt has no way to override font fallback so this
# is the only way to do this other than binary patching or recompiling Qt.
info "Renaming font to Segoe UI Emoji"
ttx "$here"/emojis.ttf
sed -i \
    -e 's/Noto Color Emoji/Segoe UI Emoji/' \
    -e 's/NotoColorEmoji/SegoeUIEmoji/'\
    -e 's/noto-emoji/segoe-ui-emoji/' \
    "$here"/emojis.ttx
# Make reproducible
touch -h -d '2000-11-11T11:11:11+00:00' emojis.ttx
ttx -f -o "$here"/emojis.ttf "$here"/emojis.ttx
rm "$here"/emojis.ttx

info "Copying font to the GUI data directory"
mv "$here"/emojis.ttf "$here"/../../gui/qt/data/emojis.ttf

(
    info "Extracting source file"
    rm -rf "$here"/source
    mkdir "$here"/source
    cd "$here"/source
    tar xzf "$SRCPATH" -C "$here"/source --strip-components=1
)

info "Copying SVG files to the GUI data directory"
grep -v -e '^$' -e '^#.*$' "$here"/emojis_svg.txt | \
    sed -e 's/[Uu]+*//' | \
    tr '[:upper:]' '[:lower:]' | \
    while read glyph ; do
    inkscape --export-plain-svg="$here"/../../gui/qt/data/emojis/emoji_u$glyph.svg "$here"/source/svg/emoji_u$glyph.svg || true
done

rm -rf "$here"/source
